package ood.application.moneykeeper.examples;

import ood.application.moneykeeper.model.*;
import javafx.scene.control.Label;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

/**
 * V√ç D·ª§ TH·ª∞C T·∫æ: C√°ch s·ª≠ d·ª•ng Observer Pattern trong MoneyKeeper
 */
public class ObserverPatternExamples {
    
    /**
     * V√ç D·ª§ 1: Thi·∫øt l·∫≠p Observer c∆° b·∫£n cho Wallet
     */
    public static void basicWalletObserverExample() {
        System.out.println("=== V√ç D·ª§ 1: BASIC WALLET OBSERVER ===");
        
        // T·∫°o wallet
        Wallet wallet = new Wallet("V√≠ ti·∫øt ki·ªám", 1000000, null);
        
        // T·∫°o observer ƒë∆°n gi·∫£n
        NotificationObserver consoleObserver = new NotificationObserver("WalletLogger");
        
        // Th√™m observer v√†o wallet
        wallet.addObserver(consoleObserver);
        
        // Th·ª±c hi·ªán c√°c thao t√°c - observers s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o t·ª± ƒë·ªông
        System.out.println("C·∫≠p nh·∫≠t s·ªë d∆∞ wallet...");
        wallet.updateBalance(1500000);  // TƒÉng s·ªë d∆∞
        
        wallet.updateBalance(800000);   // Gi·∫£m s·ªë d∆∞ (c√≥ th·ªÉ trigger low balance)
        
        // K·∫øt qu·∫£: Console s·∫Ω in ra c√°c th√¥ng b√°o v·ªÅ thay ƒë·ªïi s·ªë d∆∞
    }
    
    /**
     * V√ç D·ª§ 2: Observer cho Budget v·ªõi c·∫£nh b√°o v∆∞·ª£t gi·ªõi h·∫°n
     */
    public static void budgetObserverExample() {
        System.out.println("\n=== V√ç D·ª§ 2: BUDGET OBSERVER ===");
        
        // T·∫°o category v√† budget
        Category foodCategory = new Category("ƒÇn u·ªëng", true);
        Budget monthlyFood = new Budget("Ng√¢n s√°ch ƒÉn u·ªëng th√°ng 5", 2000000, 
                                      java.time.LocalDateTime.now(),
                                      java.time.LocalDateTime.now().plusMonths(1),
                                      foodCategory);
        
        // T·∫°o observer cho budget
        NotificationObserver budgetObserver = new NotificationObserver("BudgetTracker");
        monthlyFood.addObserver(budgetObserver);
        
        // M√¥ ph·ªèng chi ti√™u d·∫ßn d·∫ßn
        System.out.println("M√¥ ph·ªèng chi ti√™u h√†ng ng√†y...");
        monthlyFood.updateSpent(500000);    // Chi 500k
        monthlyFood.updateSpent(1200000);   // Chi th√™m -> t·ªïng 1.2M
        monthlyFood.updateSpent(1800000);   // Chi th√™m -> t·ªïng 1.8M
        monthlyFood.updateSpent(2100000);   // Chi th√™m -> V∆Ø·ª¢T GI·ªöI H·∫†N!
        
        // K·∫øt qu·∫£: S·∫Ω c√≥ c·∫£nh b√°o khi v∆∞·ª£t gi·ªõi h·∫°n ng√¢n s√°ch
    }
    
    /**
     * V√ç D·ª§ 3: UI Observer v·ªõi JavaFX components
     */
    public static void uiObserverExample(Label statusLabel, ObservableList<String> notificationList) {
        System.out.println("\n=== V√ç D·ª§ 3: UI OBSERVER ===");
        
        // T·∫°o UI observer v·ªõi c·∫£ status label v√† notification list
        UINotificationObserver uiObserver = new UINotificationObserver(statusLabel, notificationList);
        uiObserver.setShowAlerts(true);  // B·∫≠t popup alerts
        
        // T·∫°o wallet v√† budget
        Wallet wallet = new Wallet("V√≠ ch√≠nh", 500000, null);
        Category expenseCategory = new Category("Chi ti√™u", true);
        Budget budget = new Budget("Ng√¢n s√°ch th√°ng", 1000000,
                                 java.time.LocalDateTime.now(),
                                 java.time.LocalDateTime.now().plusMonths(1),
                                 expenseCategory);
        
        // Th√™m UI observer v√†o c·∫£ wallet v√† budget
        wallet.addObserver(uiObserver);
        budget.addObserver(uiObserver);
        
        // Th·ª±c hi·ªán c√°c thao t√°c
        System.out.println("Th·ª±c hi·ªán giao d·ªãch...");
        wallet.updateBalance(300000);    // S·ªë d∆∞ th·∫•p -> c·∫£nh b√°o m√†u cam
        budget.updateSpent(1200000);     // V∆∞·ª£t ng√¢n s√°ch -> c·∫£nh b√°o m√†u ƒë·ªè
        
        // K·∫øt qu·∫£: 
        // - Status label s·∫Ω thay ƒë·ªïi m√†u s·∫Øc theo lo·∫°i th√¥ng b√°o
        // - Notification list s·∫Ω c√≥ th√™m c√°c th√¥ng b√°o m·ªõi
        // - C√≥ th·ªÉ hi·ªÉn th·ªã popup alerts cho th√¥ng b√°o quan tr·ªçng
    }
    
    /**
     * V√ç D·ª§ 4: WalletUpdateObserver v·ªõi custom callbacks
     */
    public static void customWalletObserverExample() {
        System.out.println("\n=== V√ç D·ª§ 4: CUSTOM WALLET OBSERVER ===");
        
        // T·∫°o wallet observer v·ªõi custom callback functions
        WalletUpdateObserver customObserver = new WalletUpdateObserver(
            // Callback khi balance thay ƒë·ªïi
            wallet -> {
                System.out.println("üí∞ S·ªë d∆∞ ƒë√£ thay ƒë·ªïi: " + wallet.getName() + 
                                 " -> " + String.format("%,.0f VND", wallet.getBalance()));
                // C√≥ th·ªÉ c·∫≠p nh·∫≠t chart, dashboard, etc.
            },
            
            // Callback khi s·ªë d∆∞ th·∫•p
            wallet -> {
                System.out.println("‚ö†Ô∏è C·∫¢NH B√ÅO: S·ªë d∆∞ th·∫•p trong v√≠ " + wallet.getName() + 
                                 " (" + String.format("%,.0f VND", wallet.getBalance()) + ")");
                // C√≥ th·ªÉ g·ª≠i email, SMS, push notification
            },
            
            // Callback khi c√≥ transaction m·ªõi
            transaction -> {
                System.out.println("üìù Giao d·ªãch m·ªõi: " + transaction.getDescription() + 
                                 " - " + String.format("%,.0f VND", transaction.getAmount()));
                // C√≥ th·ªÉ update report, analytics
            }
        );
        
        // T·∫°o wallet v√† th√™m observer
        Wallet wallet = new Wallet("V√≠ demo", 100000, null);
        wallet.addObserver(customObserver);
        
        // Test c√°c scenarios
        System.out.println("Testing balance changes...");
        wallet.updateBalance(150000);  // TƒÉng s·ªë d∆∞
        wallet.updateBalance(50000);   // Gi·∫£m s·ªë d∆∞ -> low balance
        wallet.updateBalance(80000);   // TƒÉng l·∫°i
        
        // Test transaction (c·∫ßn t·∫°o transaction object v√† add v√†o wallet)
        // Transaction newTransaction = new Transaction(20000, "Mua coffee", category, wallet);
        // wallet.addTransaction(newTransaction);
    }
    
    /**
     * V√ç D·ª§ 5: S·ª≠ d·ª•ng NotificationManager cho qu·∫£n l√Ω to√†n c·ª•c
     */
    public static void notificationManagerExample(Label statusLabel) {
        System.out.println("\n=== V√ç D·ª§ 5: NOTIFICATION MANAGER ===");
        
        // L·∫•y singleton instance
        NotificationManager manager = NotificationManager.getInstance();
        
        // Kh·ªüi t·∫°o UI observer cho to√†n ·ª©ng d·ª•ng
        manager.initializeUIObserver(statusLabel);
        
        // Th√™m console observer to√†n c·ª•c
        NotificationObserver globalConsole = new NotificationObserver("GlobalLogger");
        manager.addGlobalObserver(globalConsole);
        
        // T·∫°o m·ªôt s·ªë ƒë·ªëi t∆∞·ª£ng business
        Wallet wallet1 = new Wallet("V√≠ 1", 1000000, null);
        Wallet wallet2 = new Wallet("V√≠ 2", 500000, null);
        
        Category category = new Category("Test", true);
        Budget budget = new Budget("Ng√¢n s√°ch test", 800000,
                                 java.time.LocalDateTime.now(),
                                 java.time.LocalDateTime.now().plusMonths(1),
                                 category);
        
        // Setup observers t·ª± ƒë·ªông cho t·∫•t c·∫£ wallets v√† budgets
        manager.setupWalletObservers(wallet1);
        manager.setupWalletObservers(wallet2);
        manager.setupBudgetObservers(budget);
        
        // Broadcast th√¥ng b√°o to√†n c·ª•c
        manager.broadcast(new NotificationData(
            NotificationType.INFO,
            "H·ªá th·ªëng ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng",
            "System"
        ));
        
        // Th·ª±c hi·ªán c√°c thao t√°c - t·∫•t c·∫£ observers s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o
        System.out.println("Th·ª±c hi·ªán thay ƒë·ªïi d·ªØ li·ªáu...");
        wallet1.updateBalance(1200000);
        wallet2.updateBalance(200000);  // Low balance
        budget.updateSpent(900000);     // Over budget
        
        // Broadcast th√¥ng b√°o k·∫øt th√∫c
        manager.broadcast(new NotificationData(
            NotificationType.INFO,
            "Demo ho√†n th√†nh",
            "System"
        ));
        
        // K·∫øt qu·∫£: T·∫•t c·∫£ th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn c·∫£ UI observer v√† console observer
    }
    
    /**
     * V√ç D·ª§ 6: X·ª≠ l√Ω l·ªói trong Observer Pattern
     */
    public static void errorHandlingExample() {
        System.out.println("\n=== V√ç D·ª§ 6: ERROR HANDLING ===");
        
        // T·∫°o observer c√≥ th·ªÉ b·ªã l·ªói
        IObserver problematicObserver = new IObserver() {
            @Override
            public void update(NotificationData notificationData) {
                if (notificationData.getMessage().contains("error")) {
                    throw new RuntimeException("Simulated observer error");
                }
                System.out.println("Observer OK: " + notificationData.getMessage());
            }
        };
        
        // T·∫°o observer b√¨nh th∆∞·ªùng
        NotificationObserver normalObserver = new NotificationObserver("NormalObserver");
        
        // T·∫°o wallet v√† th√™m c·∫£ 2 observers
        Wallet wallet = new Wallet("Test wallet", 100000, null);
        wallet.addObserver(problematicObserver);
        wallet.addObserver(normalObserver);
        
        // Test v·ªõi th√¥ng b√°o b√¨nh th∆∞·ªùng - c·∫£ 2 observers s·∫Ω ho·∫°t ƒë·ªông
        System.out.println("Test normal notification...");
        wallet.notifyObservers(new NotificationData(
            NotificationType.INFO,
            "Normal message",
            "Test"
        ));
        
        // Test v·ªõi th√¥ng b√°o g√¢y l·ªói - ch·ªâ normalObserver ho·∫°t ƒë·ªông
        System.out.println("Test error notification...");
        wallet.notifyObservers(new NotificationData(
            NotificationType.ERROR,
            "This will cause error in problematic observer",
            "Test"
        ));
        
        // K·∫øt qu·∫£: H·ªá th·ªëng v·∫´n ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng d√π c√≥ observer b·ªã l·ªói
        // NotificationManager v√† c√°c Subject ƒë√£ handle exceptions properly
    }
    
    /**
     * Main method ƒë·ªÉ ch·∫°y t·∫•t c·∫£ v√≠ d·ª•
     */
    public static void main(String[] args) {
        System.out.println("üéØ OBSERVER PATTERN EXAMPLES - MONEYKEEPER");
        System.out.println("============================================");
        
        // Ch·∫°y c√°c v√≠ d·ª• c∆° b·∫£n (kh√¥ng c·∫ßn JavaFX)
        basicWalletObserverExample();
        budgetObserverExample();
        customWalletObserverExample();
        errorHandlingExample();
        
        // NotificationManager example (c·∫ßn label)
        // notificationManagerExample(someLabel);
        
        System.out.println("\n‚úÖ T·∫•t c·∫£ v√≠ d·ª• ƒë√£ ho√†n th√†nh!");
        System.out.println("ƒê·ªÉ xem UI examples, h√£y ch·∫°y ·ª©ng d·ª•ng JavaFX v√† m·ªü Observer Demo.");
    }
}
